#[cfg(test)]
mod tests {
    // we adjust the path to:
    use super::super::{*};

    //5 Test Cases Self Created

    //Test Values In Order of Lowest To Highest Distribued (2-13, 1)
    const T6: [u8; 52] = [2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,1,1,1,1]; 
    const R6: [u8; 52] = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2];
    //Test Random Values From A Deck I Shuffled For War
    const T7: [u8; 52] = [12,13,9,8,4,13,11,11,8,1,2,12,13,2,3,7,5,1,8,13,5,9,7,9,10,2,11,1,9,10,3,4,5,7,5,3,11,2,12,8,4,3,6,6,1,4,12,7,6,6,10,10];
    const R7: [u8; 52] = [12,10,12,6,11,11,10,10,4,2,8,2,7,2,7,6,11,4,8,3,1,5,13,3,13,12,9,8,10,9,9,6,4,2,6,3,1,1,1,12,11,5,7,3,13,8,9,7,13,5,5,4];
    //Test Values Counting Down 13-1, 13-1
    const T8: [u8; 52] = [13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1];
    const R8: [u8; 52] = [1,9,13,7,13,6,12,11,11,8,4,3,11,6,9,2,9,8,8,5,9,5,8,2,1,10,12,7,13,10,7,5,11,6,6,4,1,12,5,3,13,10,4,3,1,10,4,2,12,7,3,2];
    //Test Values Counting Up - Repeating Twice 1,1-13,13, 1,1-13,13
    const T9: [u8; 52] = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
    const R9: [u8; 52] = [1,1,1,1,13,13,13,13,12,12,12,12,11,11,11,11,10,10,10,10,9,9,9,9,8,8,8,8,7,7,7,7,6,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,2,2,2,2];
    //Test Values Repeated Twice From Lowest To Highest 2,3,2,3,2,3,2,3-12,13,12,13,12,13,12,13
    const T10: [u8; 52] = [2,3,2,3,2,3,2,3,4,5,4,5,4,5,4,5,6,7,6,7,6,7,6,7,8,9,8,9,8,9,8,9,10,11,10,11,10,11,10,11,12,13,12,13,12,13,12,13,1,1,1,1];
    const R10: [u8; 52] = [1,1,1,1,13,12,13,12,13,12,13,12,11,10,11,10,11,10,11,10,9,8,9,8,9,8,9,8,7,6,7,6,7,6,7,6,5,4,5,4,5,4,5,4,3,2,3,2,3,2,3,2];

    #[test] fn shuf6() { assert_eq!(deal(&T6), R6); }
    #[test] fn shuf7() { assert_eq!(deal(&T7), R7); }
    #[test] fn shuf8() { assert_eq!(deal(&T8), R8); }
    #[test] fn shuf9() { assert_eq!(deal(&T9), R9); }
    #[test] fn shuf10() { assert_eq!(deal(&T10), R10); }
    
}
